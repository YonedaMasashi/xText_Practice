/**
 * generated by Xtext
 */
package org.xtext.example.qdsl.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.qdsl.qDsl.AnswerType;
import org.xtext.example.qdsl.qDsl.ChooseFrom;
import org.xtext.example.qdsl.qDsl.QDslPackage;
import org.xtext.example.qdsl.qDsl.Question;
import org.xtext.example.qdsl.validation.AbstractQDslValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class QDslValidator extends AbstractQDslValidator {
  public final static String INVALID_NAME = "invalidName";
  
  @Check
  public void checkAnswerTypeCorrespondence(final Question question) {
    AnswerType _answerTypes = question.getAnswerTypes();
    String _atype = _answerTypes.getAtype();
    boolean _contains = _atype.contains("check_box");
    if (_contains) {
      EList<EObject> _eContents = question.eContents();
      ChooseFrom _chooseFroms = question.getChooseFroms();
      boolean _contains_1 = _eContents.contains(_chooseFroms);
      boolean _not = (!_contains_1);
      if (_not) {
        this.error("AnswerType Check requires ChooseFrom Option", QDslPackage.Literals.QUESTION__ANSWER_TYPES);
      }
    }
    AnswerType _answerTypes_1 = question.getAnswerTypes();
    String _atype_1 = _answerTypes_1.getAtype();
    boolean _contains_2 = _atype_1.contains("free_text");
    if (_contains_2) {
      ChooseFrom _chooseFroms_1 = question.getChooseFroms();
      EList<String> _choices = _chooseFroms_1.getChoices();
      boolean _isEmpty = _choices.isEmpty();
      boolean _not_1 = (!_isEmpty);
      if (_not_1) {
        this.error("AnswerType Text does not require ChooseFrom Options", QDslPackage.Literals.QUESTION__ANSWER_TYPES);
      }
    }
    AnswerType _answerTypes_2 = question.getAnswerTypes();
    String _atype_2 = _answerTypes_2.getAtype();
    boolean _contains_3 = _atype_2.contains("radio_button");
    if (_contains_3) {
      EList<EObject> _eContents_1 = question.eContents();
      ChooseFrom _chooseFroms_2 = question.getChooseFroms();
      boolean _contains_4 = _eContents_1.contains(_chooseFroms_2);
      boolean _not_2 = (!_contains_4);
      if (_not_2) {
        this.error("AnswerType Radio requires ChooseFrom Options", QDslPackage.Literals.QUESTION__ANSWER_TYPES);
      }
    }
  }
}
